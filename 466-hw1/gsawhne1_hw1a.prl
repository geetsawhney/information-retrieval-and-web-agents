#!/usr/local/bin/perl

use FileHandle;

############################################################
##  SHELL FOR END-OF-SENTENCE CLASSIFIER
############################################################


my $classes  = "./classes";  # directory path on condor

my $abbrvs                = { };   # hash of common abbreviations
my $titles                = { };   # hash of common titles
my $timeterms             = { };  # hash of common timeterms
my $sentence_internal     = { }; # hash of common sentence_internal
my $unlikely_proper_nouns = { }; # hash of common unlikely_proper_nouns

my $line      = undef;   # used to store a line of input
my $correct   = 0;       # the number of correct classifications made
my $incorrect = 0;       # the number of incorrect classifications made

my @correct_arr=(0,0,0,0,0,0,0,0,0,0,0);
my @incorrect_arr=(0,0,0,0,0,0,0,0,0,0,0);


&initialize_set( $abbrvs, "$classes/abbrevs" );
&initialize_set( $titles, "$classes/titles"  );
&initialize_set( $timeterms, "$classes/timeterms" );
&initialize_set( $sentence_internal, "$classes/sentence_internal"  );
&initialize_set( $unlikely_proper_nouns, "$classes/unlikely_proper_nouns" );


while (defined ($line = <STDIN>)) {

    my @words = split ' ', $line;

    my $class   = shift @words;    # 'EOS' or 'NEOS'
    my $id      = shift @words;    # sentence identifier
    my $L3      = shift @words;    # 3rd word to the left of period
    my $L2      = shift @words;    # 2nd word to the left of period
    my $L1      = shift @words;    # 1st word to the left of period
    my $C       = shift @words;    # the period
    my $R1      = shift @words;    # 1st word to the right of period
    my $R2      = shift @words;    # 2nd word to the right of period
    my $R3      = shift @words;    # 3rd word to the right of period
    my $Llength = shift @words;    # words to the left before a !,?, or <P>
    my $Rlength = shift @words;    # words to the right before a !,?, or <P>
    my $Nspaces = shift @words;    # number of spaces after the period

    # Rule definitions

      #    1) If the word immediately to the right begins with a lower case
      #       letter than not an end of sentence
      if    ( $R1 =~ /^[a-z]/ ) {
        &ret( 2, $class, $id, 'NEOS', $line);
      }



      #    2) If the token immediately to the right is a paragraph indicator than
      #       is an end of sentence
      elsif ( $R1 =~ /^<P>$/  ) {
        &ret( 1, $class, $id, 'EOS' , $line);
      }



      #    3) If the token immediately to the right is a comma or period than not
      #       an end of sentence
      elsif ( $R1 =~ /^[,.:;!?]/  ) {
        &ret( 3, $class, $id, 'NEOS', $line);
      }



      #    If the token immediately to the left is a singular capital letter
      elsif ( $L1 =~ /^[A-Z]$/) {

      #    4) If the token immediately to the left is a singular capital letter
      #       and Token to the right is unlikely_proper_noun and R2 is a period.
        if  ( exists $$unlikely_proper_nouns{"\L$R1"} && $R2 eq ".") {
          &ret( 4, $class, $id, 'NEOS', $line);
        }

      #    5) If the token immediately to the left is a singular capital letter
      #       and Token to the right is unlikely_proper_noun.
        elsif ( exists $$unlikely_proper_nouns{"\L$R1"} ) {
          &ret(5, $class , $id, 'EOS', $line);
        }
      #   6) If the token immediately to the Right is a singular capital letter.
        else {
          &ret(6, $class , $id, 'NEOS', $line);
        }
      }



      # 7) If L1 is sentence internal
      elsif( exists $$sentence_internal{"\L$L1"}){
        &ret(7, $class , $id, 'NEOS', $line);
      }

      # 8) If L1 is abbreviation and R1 is proper noun.
      elsif (exists $$abbrvs{ "\L$L1" }) {
          if (exists $$unlikely_proper_nouns{"\L$R1"}){
              ret( 9, $class, $id, 'EOS', $line);
          }
          # 9) Else it is not end of line
  	       else{ &ret( 8, $class, $id, 'NEOS', $line);}
  	  }



      #  10) If period is part of an abbreviation of with multiple periods
      elsif ($L1 =~ /^[aA-zZ]+[.][aA-zZ.]+/) {
        &ret(10,$class,$id,'NEOS');
      }
      # 11) Else left
      else                     {
       &ret( 11, $class, $id, 'EOS' , $line); }
      }


      for ( my $i = 0 ; $i < @correct_arr ; $i++ ) {

          if ( not defined($correct_arr[$i]))   {
             $correct_arr[$i]   = 0;
           }
          if ( not defined($incorrect_arr[$i])) {
             $incorrect_arr[$i] = 0;
           }

          if ( ( $correct_arr[$i] + $incorrect_arr[$i] ) == 0 ) {
             next;
           }
          print "Rule ", $i+1, ": ";
          print "\n\t\t#USED:\t\t\t",( $correct_arr[$i] + $incorrect_arr[$i] );
          print "\n\t\t% of Total used:\t";
          printf "%.3f",( $correct_arr[$i] + $incorrect_arr[$i] ) *100/ ($correct  + $incorrect);

          print "%\n\t\t#Correct:\t\t", $correct_arr[$i];
          print "\n\t\t#Incorrect:\t\t", $incorrect_arr[$i];
          print "\n\t\t% Correct of # Used:\t";
          printf "%.3f", $correct_arr[$i] * 100 / ( $correct_arr[$i] + $incorrect_arr[$i] );
          print "%\n";
          print "\t\t% Incorrect of # Used:\t";
          printf "%.3f", $incorrect_arr[$i] * 100 / ( $correct_arr[$i] + $incorrect_arr[$i] );
          print "%\n\n"
      }
#print "Your score is: ", $correct / ($correct + $incorrect), "\n";

my $sumcorrect = eval join '+', @correct_arr;
my $sumincorrect = eval join '+', @incorrect_arr;
print "\n### HW1A gsawhne1 - OVERALL CORRECT: ", $sumcorrect, " = ";
printf("%.1f", (($sumcorrect * 100) / ($sumcorrect + $sumincorrect)));
print "%   INCORRECT: ", $sumincorrect, " = ";
printf("%.1f", (($sumincorrect * 100) / ($sumcorrect + $sumincorrect)));
print "%";



############################################################
## RET - prints full line for errors and keeps score. $rule
##     - indicates the rule number responsible for the
##     - classification
##
##  This is a useful debugging tool, as after each change in
##  the program one can identify the remaining misclassified
##  training examples and the patterns responsible for them.
############################################################


sub ret {

    my $rule       = shift;   # which rule did I use here
    my $trueclass  = shift;   # what is the true sentence class ('NEOS','EOS')
    my $id         = shift;   # sentence identifier
    my $givenclass = shift;   # what is the sentence class my rule gives
    my $line       = shift;   # the actual line tested

    if ($trueclass eq $givenclass) {
	     # print ".. (at rule ", $rule, ") - ", $line;
        $correct_arr[$rule-1]+=1;
	      $correct++;
    }
    else {

	     #print "XX (at rule ", $rule, ") - ", $line;
       $incorrect_arr[$rule-1]+=1;
	     $incorrect++;
    }
}


############################################################
## INITIALIZE_SET - loads named associative array with set
##                - members
############################################################

sub initialize_set {

    my $hash   = shift;  # hash to initialize (hash reference)
    my $file   = shift;  # file to retrieve words from

    my $word   = undef;
    my $handle = new FileHandle $file, "r";  # open file for reading only

    if (defined $handle) {
	while (defined ($word = <$handle>)) {

	    chomp   $word;
	    $$hash{ $word } = 1;
	}
    }
    undef $handle;                           # close the file
}
