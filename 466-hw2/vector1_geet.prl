#!/usr/local/bin/perl -w

use strict;

use Carp;
use FileHandle;

my $DIR  = ".";
my $HOME = ".";

my $token_docs = "$DIR/cacm";            # tokenized cacm journals
my $corps_freq = "$DIR/cacm";            # frequency of each token in the journ.
my $stoplist   = "$DIR/common_words";    # common uninteresting words
my $titles     = "$DIR/titles.short";    # titles of each article in cacm
my $token_qrys = "$DIR/query";           # tokenized canned querys
my $query_freq = "$DIR/query";           # frequency of each token in the querys
my $query_relv = "$DIR/query\.rels";     # relevance of a journal entry to a
                                         #  given query

my $token_intr = "$HOME/interactive";    # file created for interactive queries
my $inter_freq = "$HOME/interactive";    # frequency of each token in above

my @doc_vector = ();

my @qry_vector = ();

my %docs_freq_hash = ();

my %corp_freq_hash = ();

my %stoplist_hash = ();

my @titles_vector = ();

my %relevance_hash = ();

my @doc_simula = ();

my @res_vector = ();

# start program

&main_loop;

sub init_files {

    if ( "stemmed" eq ( shift || "" ) ) {

        $token_docs .= "\.stemmed";
        $corps_freq .= "\.stemmed\.hist";
        $stoplist   .= "\.stemmed";
        $token_qrys .= "\.stemmed";
        $query_freq .= "\.stemmed\.hist";
        $token_intr .= "\.stemmed";
        $inter_freq .= "\.stemmed\.hist";
    }
    else {

        $token_docs .= "\.tokenized";
        $corps_freq .= "\.tokenized\.hist";
        $token_qrys .= "\.tokenized";
        $query_freq .= "\.tokenized\.hist";
        $token_intr .= "\.tokenized";
        $inter_freq .= "\.tokenized\.hist";
    }
}

sub init_corp_freq {

    my $corps_freq_fh = new FileHandle $corps_freq, "r"
      or croak "Failed $corps_freq";

    my $query_freq_fh = new FileHandle $query_freq, "r"
      or croak "Failed $query_freq";

    my $stoplist_fh = new FileHandle $stoplist , "r"
      or croak "Failed $stoplist";

    my $titles_fh = new FileHandle $titles , "r"
      or croak "Failed $titles";

    my $query_relv_fh = new FileHandle $query_relv, "r"
      or croak "Failed $query_relv";

    my $line = undef;

    while ( defined( $line = <$corps_freq_fh> ) ) {

        my ($str) = ( $line =~ /^\s*(\S.*)/ );

        my ( $doc_freq, $cor_freq, $term ) = split /\s+/, $str;

        $docs_freq_hash{$term} = $doc_freq;
        $corp_freq_hash{$term} = $cor_freq;
    }

    while ( defined( $line = <$query_freq_fh> ) ) {

        my ($str) = ( $line =~ /^\s*(\S.*)/ );

        my ( $doc_freq, $cor_freq, $term ) = split /\s+/, $str;

        $docs_freq_hash{$term} += $doc_freq;
        $corp_freq_hash{$term} += $cor_freq;
    }

    while ( defined( $line = <$stoplist_fh> ) ) {

        chomp $line;
        $stoplist_hash{$line} = 1;
    }

    push @titles_vector, "";    # push one empty value onto @titles_vector
                                # so that indices correspond with title
                                # numbers.

    while ( defined( $line = <$titles_fh> ) ) {

        chomp $line;
        push @titles_vector, $line;
    }

    while ( defined( $line = <$query_relv_fh> ) ) {

        my ($str) = ( $line =~ /^\s*(\S.*)/ );

        my ( $qry_num, $rel_doc ) = split /\s+/, $str;

        $relevance_hash{ int($qry_num) }{ int($rel_doc) } = 1;
    }
}

sub init_doc_vectors {
    my $setting = shift;

    my $TITLE_BASE_WEIGHT = 3;    # weight given a title token
    my $KEYWD_BASE_WEIGHT = 4;    # weight given a key word token
    my $ABSTR_BASE_WEIGHT = 1;    # weight given an abstract word token
    my $AUTHR_BASE_WEIGHT = 3;    # weight given an an author token

    if ( $setting == 51 ) {
        $TITLE_BASE_WEIGHT = 1;
        $KEYWD_BASE_WEIGHT = 1;
        $ABSTR_BASE_WEIGHT = 1;
        $AUTHR_BASE_WEIGHT = 1;
    }
    else {
        if ( $setting == 53 ) {
            $TITLE_BASE_WEIGHT = 1;
            $KEYWD_BASE_WEIGHT = 1;
            $ABSTR_BASE_WEIGHT = 4;
            $AUTHR_BASE_WEIGHT = 1;
        }
    }

    my $token_docs_fh = new FileHandle $token_docs, "r"
      or croak "Failed $token_docs";

    my $word = undef;

    my $doc_num = 0;    # current document number and total docs at end
    my $tweight = 0;    # current weight assigned to document token

    push @doc_vector, {};    # push one empty value onto @doc_vector so that
                             # indices correspond with document numbers

    while ( defined( $word = <$token_docs_fh> ) ) {

        chomp $word;

        last if $word =~ /^\.I 0/;    # indicates end of file so kick out

        if ( $word =~ /^\.I/ ) {      # indicates start of a new document

            push @doc_vector, {};
            $doc_num++;

            next;
        }

        $tweight = $TITLE_BASE_WEIGHT and next if $word =~ /^\.T/;
        $tweight = $KEYWD_BASE_WEIGHT and next if $word =~ /^\.K/;
        $tweight = $ABSTR_BASE_WEIGHT and next if $word =~ /^\.W/;
        $tweight = $AUTHR_BASE_WEIGHT and next if $word =~ /^\.A/;

        if (   ( $word =~ /[\S]/ and $setting == 42 )
            || ( $word =~ /[a-zA-Z]/ and !exists $stoplist_hash{$word} ) )
        {
            if ( defined( $docs_freq_hash{$word} ) ) {

                if ( $setting == 13 ) {
                    $doc_vector[$doc_num]{$word} = 1;
                }
                else {
                    $doc_vector[$doc_num]{$word} += $tweight;
                }
            }
            else {
                print "ERROR: Document frequency of zero: ", $word, "\n";
            }
        }
    }

    if ( $setting != 11 && $setting != 13 ) {
        foreach my $hash (@doc_vector) {
            foreach my $key ( keys %{$hash} ) {
                $hash->{$key} *= log( $doc_num / $docs_freq_hash{$key} );
            }
        }
    }

    return $doc_num;
}

sub init_qry_vectors {
    my $setting = shift;

    my $QUERY_BASE_WEIGHT = 2;
    my $QUERY_AUTH_WEIGHT = 2;

    my $token_qrys_fh = new FileHandle $token_qrys, "r"
      or croak "Failed $token_qrys";

    my $word = undef;

    my $tweight = 0;
    my $qry_num = 0;

    push @qry_vector, {};    # push one empty value onto @qry_vectors so that
                             # indices correspond with query numbers

    while ( defined( $word = <$token_qrys_fh> ) ) {

        chomp $word;

        if ( $word =~ /^\.I/ ) {

            push @qry_vector, {};
            $qry_num++;

            next;
        }

        $tweight = $QUERY_BASE_WEIGHT and next if $word =~ /^\.W/;
        $tweight = $QUERY_AUTH_WEIGHT and next if $word =~ /^\.A/;

        if (   ( $word =~ /[\S]/ and $setting == 42 )
            || ( $word =~ /[a-zA-Z]/ && !exists $stoplist_hash{$word} ) )
        {

            if ( !exists $docs_freq_hash{$word} ) {
                print "ERROR: Document frequency of zero: ", $word, "\n";
            }
            else {
                if ( $setting == 13 ) {
                    $qry_vector[$qry_num]{$word} = 1;
                }
                else {
                    $qry_vector[$qry_num]{$word} += $tweight;
                }
            }
        }
    }

    return $qry_num;
}

sub main_loop {

    # Set mode for Part 2 (e.g. 0 := default, 31 := 3(a), 32 := 3(b))
    my $setting = 31;

    print "INITIALIZING VECTORS ... \n";

    if ( $setting == 31 ) {
        &init_files("unstemmed");
    }
    else {
        &init_files("stemmed");
    }

    &init_corp_freq;

    my $total_docs = &init_doc_vectors($setting);
    my $total_qrys = &init_qry_vectors($setting);

    while (1) {

        print <<"EndOfMenu";

	============================================================
	==     Welcome to the 600.466 Vector-based IR Engine
	==
        == Total Documents: $total_docs
	== Total Queries:   $total_qrys
	============================================================

	OPTIONS:
	  1 = Find documents most similar to a given query or document
	  2 = Compute precision/recall for the full query set
	  3 = Compute cosine similarity between two queries/documents
	  4 = Quit

	============================================================

EndOfMenu

        print "Enter Option: ";

        my $option = <STDIN>;
        chomp $option;

        exit 0 if $option == 4;

        &full_precision_recall_test and next if $option == 2;
        &do_full_cosine_similarity  and next if $option == 3;

        # default and choice 1 is

        &get_and_show_retrieved_set($setting);
    }
}

sub get_and_show_retrieved_set {
    my $setting = shift;

    print << "EndOfMenu";

    Find documents similar to:
        (1) a query from 'query.raw'
	(2) an interactive query
	(3) another document
EndOfMenu

    print "Choice: ";

    my $comp_type = <STDIN>;
    chomp $comp_type;

    if ( $comp_type !~ /^[1-3]$/ ) { $comp_type = 1; }

    print "\n";

    my $vect_num = 1;

    if ( $comp_type != 2 ) {
        print "Target Document/Query number: ";

        $vect_num = <STDIN>;
        chomp $vect_num;

        if ( $vect_num !~ /^[1-9]/ ) { $vect_num = 1; }

        print "\n";
    }

    print "Show how many matching documents (20): ";

    my $max_show = <STDIN>;
    chomp $max_show;

    if ( $max_show !~ /[0-9]/ ) { $max_show = 20; }

    if ( $comp_type == 3 ) {

        print "Document to Document comparison\n";

        &get_retrieved_set( $doc_vector[$vect_num], $setting );
        &shw_retrieved_set( $max_show, $vect_num, $doc_vector[$vect_num],
            "Document" );
    }
    elsif ( $comp_type == 2 ) {

        print "Interactive Query to Document comparison\n";

        my $int_vector = &set_interact_vec;    # vector created by interactive
                                               #  query

        &get_retrieved_set( $int_vector, $setting );
        &shw_retrieved_set( $max_show, 0, $int_vector, "Interactive Query" );
    }
    else {

        print "Query to Document comparison\n";

        &get_retrieved_set( $qry_vector[$vect_num], $setting );
        &shw_retrieved_set( $max_show, $vect_num, $qry_vector[$vect_num],
            "Query" );

        &comp_recall( $relevance_hash{$vect_num}, $vect_num );
        &show_relvnt( $relevance_hash{$vect_num},
            $vect_num, $qry_vector[$vect_num] );
    }
}

sub set_interact_vec {

    system "$DIR/interactive.prl" and die "Failed $DIR/interactive.prl: $!\n";

    my $QUERY_BASE_WEIGHT = 2;
    my $QUERY_AUTH_WEIGHT = 2;

    my $token_qrys_fh = new FileHandle $token_intr, "r"
      or croak "Failed $token_intr";

    my $int_vector = {};
    my $word       = undef;

    my $tweight = 0;
    my $qry_num = 0;

    while ( defined( $word = <$token_qrys_fh> ) ) {

        chomp $word;
        print $word, "\n";

        next if $word =~ /^\.I/;    # start of query tokens

        $tweight = $QUERY_BASE_WEIGHT and next if $word =~ /^\.W/;
        $tweight = $QUERY_AUTH_WEIGHT and next if $word =~ /^\.A/;

        if ( $word =~ /[a-zA-Z]/ && !exists $stoplist_hash{$word} ) {

            if ( !exists $docs_freq_hash{$word} ) {
                print "ERROR: Document frequency of zero: ", $word, "\n";
            }
            else {
                $$int_vector{$word} += $tweight;
            }
        }
    }

    return $int_vector;
}

sub get_retrieved_set {

    my $qry_vector = shift;
    my $setting    = shift;
    my $tot_number = ( scalar @doc_vector ) - 1;
    my $index      = 0;

    @doc_simula = ();    # insure that storage vectors are empty before we
    @res_vector = ();    # calculate vector similarities

    push @doc_simula, 0.0;    # push one empty value so that indices
                              # correspond with document values

    for $index ( 1 .. $tot_number ) {
        if ( $setting == 22 ) {
            push @doc_simula,
              &jaccard_sim_a( $qry_vector, $doc_vector[$index] );
        }
        else {
            push @doc_simula, &cosine_sim_a( $qry_vector, $doc_vector[$index] );
        }
    }

    @res_vector =
      sort { -1 * ( $doc_simula[$a] <=> $doc_simula[$b] ); } 1 .. $tot_number;
}

sub shw_retrieved_set {

    my $max_show   = shift;
    my $qry_num    = shift;
    my $qry_vect   = shift;
    my $comparison = shift;

    print << "EndOfList";

    ************************************************************
	Documents Most Similar To $comparison number $qry_num
    ************************************************************
    Similarity   Doc#  Author      Title
    ==========   ==== ========     =============================

EndOfList

    my $rel_num = $qry_num;
    my $index   = 0;

    for $index ( 0 .. $max_show ) {
        my $ind = $res_vector[$index];

        if (    ( $comparison =~ /Query/ )
            and ( $relevance_hash{$rel_num}{$ind} ) )
        {
            print "\* ";
        }
        else {
            print "  ";
        }

        my ($similarity) =
          $doc_simula[$ind] == 1
          ? "1.00000000"
          : ( $doc_simula[$ind] =~ /^([0-9]+\.\d{0,8})/ );
        my $title = substr $titles_vector[$ind], 0, 47;

        print "  ", $similarity, "   ", $title, "\n";
    }

    print "\n";
    print "Show the terms that overlap between the query and ";
    print "retrieved docs (y/n): ";

    my $show_terms = <STDIN>;
    if ( $show_terms !~ /[nN]/ ) {

        my $index = 0;

        for $index ( 0 .. $max_show ) {
            my $ind = $res_vector[$index];

            show_overlap( $qry_vect, $doc_vector[$ind], $qry_num, $ind );

            if ( $index % 5 == 4 ) {

                print "\n";
                print "Continue (y/n)? ";

                my $cont = <STDIN>;
                if ( $cont =~ /[nN]/ ) {
                    last;
                }
            }
        }
    }
}

sub comp_recall {

    # Initialize arguments

    my $rel_hash = shift;
    my $qvn      = shift;

    # Make list of ranks for relevant documents

    my @doc_rank   = ();
    my $tot_number = ( scalar @doc_vector ) - 1;

    my $index = 0;

    for $index ( 0 .. $tot_number ) {

        # document number in rank order
        my $ind = $res_vector[$index];

        # check whether this document is relevant
        if ( defined($ind) && $rel_hash->{$ind} ) {
            push @doc_rank, $index + 1;
        }
    }

    # Compute recall/precision pairs

    my @recall_level = ();    # desired recall levels

    for $index ( 1 .. 9 ) {
        push @recall_level, int( 10 * $index );
    }

    push @recall_level, 25;
    push @recall_level, 75;

    @recall_level = sort { $a <=> $b } @recall_level;

    my %precisions;           # precisions for various recall levels

    my $tot_rel           = scalar @doc_rank;
    my $curr_recall_level = -1;
    my $next_recall_level = -1;
    my $curr_prec_level   = -1;
    my $next_prec_level   = -1;

    $precisions{100} = $tot_rel / $doc_rank[ $tot_rel - 1 ];

    for $index ( 0 .. ( $tot_rel - 1 ) ) {
        $curr_recall_level = $index / $tot_rel;
        $next_recall_level = ( $index + 1 ) / $tot_rel;
        $curr_prec_level   = $index == 0 ? 0 : $index / $doc_rank[ $index - 1 ];
        $next_prec_level   = ( $index + 1 ) / $doc_rank[$index];

        my $idx = 0;

        my $recall_level = $recall_level[$idx] / 100;

        while ($curr_recall_level <= $recall_level
            && $recall_level < $next_recall_level )
        {
            # Perform interpolation for precision
            $precisions{ $recall_level[$idx] } =
              ( $recall_level - $curr_recall_level ) /
              ( $next_recall_level - $curr_recall_level ) *
              ( $next_prec_level - $curr_prec_level ) + $curr_prec_level;

            if ( ++$idx == scalar @recall_level ) {
                last;
            }

            $recall_level = $recall_level[$idx] / 100;
        }

        if ( $idx > 0 ) {
            splice @recall_level, 0, $idx;

            if ( scalar @recall_level == 0 ) {
                last;
            }
        }
    }

    my $prec_mean1 =
      ( $precisions{25} + $precisions{50} + $precisions{75} ) / 3;
    my $prec_mean2 =
      ( eval join '+', ( map { $precisions{ int( 10 * $_ ) } } ( 1 .. 10 ) ) )
      / 10;
    my $prec_norm =
      1 - ( ( eval join '+', ( map { log($_) } @doc_rank ) ) -
          ( eval join '+', ( map { log($_) } ( 1 .. $tot_rel ) ) ) ) /
      ( $tot_number * log($tot_number) -
          ( $tot_number - $tot_rel ) * log( $tot_number - $tot_rel ) -
          $tot_rel * log($tot_rel) );
    my $recall_norm =
      1 -
      ( ( eval join '+', @doc_rank ) - ( eval join '+', ( 1 .. $tot_rel ) ) ) /
      ( $tot_rel * ( $tot_number - $tot_rel ) );

    return (
        $precisions{25}, $precisions{50}, $precisions{75}, $precisions{100},
        $prec_mean1,     $prec_mean2,     $prec_norm,      $recall_norm
    );
}

sub show_relvnt {
    my $rel_hash = shift;
    my $qvn      = shift;
    my $qvector  = shift;

    print << "EndOfList";

    ************************************************************
	Documents relevant to query number $qvn
    ************************************************************
    Similarity   Doc#  Author      Title
    ==========   ==== ========     =============================

EndOfList

    my $tot_rel = scalar @res_vector;
    my $index   = 0;
    for $index ( 0 .. $tot_rel ) {
        my $ind = $res_vector[$index];

        if ( defined($ind) && $rel_hash->{$ind} ) {

            # my ($similarity) = ($doc_simula[$ind]    =~ /^([0-9]+\.\d{0,8})/);
            my ($similarity) = $doc_simula[$ind];
            my $title = substr $titles_vector[$ind], 0, 47;

            # print "  ", $similarity, "   ", $title, "\n";
            printf( "    %-12.8f %s\n", $similarity, $title );
        }
    }
    print "\n";
}

sub show_overlap {

    my $qry_vect = shift;
    my $doc_vect = shift;
    my $qry_num  = shift;
    my $doc_num  = shift;

    print "============================================================\n";
    printf(
        "%-15s  %8d   %8d\t%s\n",
        "Vector Overlap",
        $qry_num, $doc_num, "Docfreq"
    );
    print "============================================================\n";

    my $one_term   = undef;
    my $weight_one = undef;

    while ( ( $one_term, $weight_one ) = each %{$qry_vect} ) {
        if ( exists $$doc_vect{$one_term} ) {

            printf( "%-15s  %8d   %8d\t%d\n",
                $one_term, $weight_one, $$doc_vect{$one_term},
                $docs_freq_hash{$one_term} );
        }
    }
}

sub do_full_cosine_similarity {

    print "\n";
    print "1st Document/Query number: ";

    my $num_one = <STDIN>;
    chomp $num_one;

    print "\n";
    print "2nd Document/Query number: ";

    my $num_two = <STDIN>;
    chomp $num_two;

    $num_one = 1 if $num_one !~ /[0-9]/;
    $num_two = 1 if $num_two !~ /[0-9]/;

    full_cosine_similarity( $qry_vector[$num_one], $doc_vector[$num_two],
        $num_one, $num_two );
}

sub full_cosine_similarity {

    my $qry_vect = shift;
    my $doc_vect = shift;
    my $qry_indx = shift;
    my $doc_indx = shift;

    print "============================================================\n";
    printf(
        "%-15s  %8d   %8d\t%-15s\n",
        "Vector Overlap",
        $qry_indx, $doc_indx, "Weight Product"
    );
    print "============================================================\n";

    my $one_term   = undef;
    my $weight_one = undef;
    my $term_two   = undef;
    my $weight_two = undef;

    my $num     = 0;
    my $sum1    = 0;
    my $sum2    = 0;
    my $sum_sq1 = 0;
    my $sum_sq2 = 0;

    while ( ( $one_term, $weight_one ) = each %{$qry_vect} ) {
        $num += $weight_one * ( $$doc_vect{$one_term} || 0 );
        $sum1 += $weight_one;
        $sum_sq1 += ( $weight_one * $weight_one );

        if ( exists $$doc_vect{$one_term} ) {
            printf( "%-15s  %8d   %8d\t%8d\n",
                $one_term, $weight_one, $$doc_vect{$one_term},
                $weight_one * $$doc_vect{$one_term} );
        }
    }

    while ( ( $term_two, $weight_two ) = each %{$doc_vect} ) {
        $sum2 += $weight_two;
        $sum_sq2 += ( $weight_two * $weight_two );
    }

    my $cosine_sim = &cosine_sim_b( $num, $sum_sq1, $sum_sq2 );
    my $dice_sim = &dice_sim_b( $num, $sum1, $sum2 );
    my $jaccard_sim = &jaccard_sim_b( $num, $sum1, $sum2 );

    print "============================================================\n";
    printf(
        "%-15s\t%-15s\t%-15s\n",
        "Cosine Sim.",
        "Dice Sim.",
        "Jaccard Sim."
    );
    printf( "%8d\t%8d\t%8d\n", $cosine_sim, $dice_sim, $jaccard_sim );
    print "============================================================\n";
}

sub full_precision_recall_test {
    print
"======================================================================================\n";
    print
"Permutation Name\tP_0.25\tP_0.50\tP_0.75\tP_1.00\tP_mean1\tP_mean2\tP_norm\tR_norm\n";
    print
"======================================================================================\n";

    &execute_permutation( "Raw TF Weight     ", 11 );
    &execute_permutation( "Boolean Weight    ", 13 );
    &execute_permutation( "Jaccard Similarity", 22 );
    &execute_permutation( "Unstemmed Tokens  ", 31 );
    &execute_permutation( "Include All Tokens", 42 );
    &execute_permutation( "Equal Weights     ", 51 );
    &execute_permutation( "Relative Weights  ", 53 );
    &execute_permutation( "Default Setting   ", 0 );
}

sub execute_permutation {
    my $name    = shift;
    my $setting = shift;

    $token_docs = "$DIR/cacm";
    $corps_freq = "$DIR/cacm";
    $stoplist   = "$DIR/common_words";
    $titles     = "$DIR/titles.short";
    $token_qrys = "$DIR/query";
    $query_freq = "$DIR/query";
    $token_intr = "$HOME/interactive";
    $inter_freq = "$HOME/interactive";

    @doc_vector     = ();
    @qry_vector     = ();
    %docs_freq_hash = ();
    %corp_freq_hash = ();
    %stoplist_hash  = ();
    @titles_vector  = ();
    %relevance_hash = ();

    if ( $setting == 31 ) {
        &init_files("unstemmed");
    }
    else {
        &init_files("stemmed");
    }

    &init_corp_freq;
    &init_doc_vectors($setting);
    &init_qry_vectors($setting);

    # Collect results

    my @averaged_result = ( 0, 0, 0, 0, 0, 0, 0, 0 );

    my $tot_queries = scalar @qry_vector - 1;

    my $idx = 0;

    for my $ind ( 1 .. $tot_queries ) {
        &get_retrieved_set( $qry_vector[$ind], $setting );
        my @recall = &comp_recall( $relevance_hash{$ind}, $ind );
        for ( $idx = 0 ; $idx < scalar @averaged_result ; $idx++ ) {
            $averaged_result[$idx] += $recall[$idx];
        }
    }

    # Print results

    print $name, "\t";

    for ( $idx = 0 ; $idx < scalar @averaged_result ; $idx++ ) {
        printf "%.3f\t", ( $averaged_result[$idx] / $tot_queries );
    }

    print "\n";
}

sub cosine_sim_a {

    my $vec1 = shift;
    my $vec2 = shift;

    my $num     = 0;
    my $sum_sq1 = 0;
    my $sum_sq2 = 0;

    my @val1 = values %{$vec1};
    my @val2 = values %{$vec2};


    if ( ( scalar @val1 ) > ( scalar @val2 ) ) {
        my $tmp = $vec1;
        $vec1 = $vec2;
        $vec2 = $tmp;
    }

    # calculate the cross product

    my $key = undef;
    my $val = undef;

    while ( ( $key, $val ) = each %{$vec1} ) {
        $num += $val * ( $$vec2{$key} || 0 );
    }

    # calculate the sum of squares

    my $term = undef;

    foreach $term (@val1) { $sum_sq1 += $term * $term; }
    foreach $term (@val2) { $sum_sq2 += $term * $term; }

    return &cosine_sim_b( $num, $sum_sq1, $sum_sq2 );
}

sub cosine_sim_b {

    my $num     = shift;
    my $sum_sq1 = shift;
    my $sum_sq2 = shift;

    return ( $num / sqrt( $sum_sq1 * $sum_sq2 ) );
}

sub jaccard_sim_a {

    my $vec1 = shift;
    my $vec2 = shift;

    my $num  = 0;
    my $sum1 = 0;
    my $sum2 = 0;

    my @val1 = values %{$vec1};
    my @val2 = values %{$vec2};

    if ( ( scalar @val1 ) > ( scalar @val2 ) ) {
        my $tmp = $vec1;
        $vec1 = $vec2;
        $vec2 = $tmp;
    }

    my $key = undef;
    my $val = undef;

    while ( ( $key, $val ) = each %{$vec1} ) {
        $num += $val * ( $$vec2{$key} || 0 );
    }

    my $term = undef;

    foreach $term (@val1) { $sum1 += $term; }
    foreach $term (@val2) { $sum2 += $term; }

    return &jaccard_sim_b( $num, $sum1, $sum2 );
}

sub jaccard_sim_b {

    my $num  = shift;
    my $sum1 = shift;
    my $sum2 = shift;

    return ( $num / ( $sum1 + $sum2 - $num ) );
}

sub dice_sim_a {

    my $vec1 = shift;
    my $vec2 = shift;

    my $num  = 0;
    my $sum1 = 0;
    my $sum2 = 0;

    my @val1 = values %{$vec1};
    my @val2 = values %{$vec2};

    if ( ( scalar @val1 ) > ( scalar @val2 ) ) {
        my $tmp = $vec1;
        $vec1 = $vec2;
        $vec2 = $tmp;
    }

    my $key = undef;
    my $val = undef;

    while ( ( $key, $val ) = each %{$vec1} ) {
        $num += $val * ( $$vec2{$key} || 0 );
    }

    my $term = undef;

    foreach $term (@val1) { $sum1 += $term; }
    foreach $term (@val2) { $sum2 += $term; }

    return &dice_sim_b( $num, $sum1, $sum2 );
}


sub dice_sim_b {

    my $num  = shift;
    my $sum1 = shift;
    my $sum2 = shift;

    return ( 2 * $num / ( $sum1 + $sum2 ) );
}
